image: registry.gitlab.com/gitlab-org/gitlab-build-images:gitlab-operator-build-base

stages:
  - lint
  - prepare
  - test
  - build
  - release
  - functional_test

default:
  interruptible: true

.cache:
  variables:
    GOPATH: "${CI_PROJECT_DIR}/.go"
  before_script:
    - mkdir -p .go charts
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - .go/pkg/mod/
      - charts/

.docker_build_job: &docker_build_job
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - docker login -u "${CI_REGISTRY_USER}" -p "${CI_REGISTRY_PASSWORD}" "${CI_REGISTRY}"
  script:
    - docker build -t "${DOCKER_IMAGE}" -f "${DOCKER_FILE:-Dockerfile}" .
    - docker push "${DOCKER_IMAGE}"
  extends: .cache
  interruptible: false

lint_code:
  image: registry.gitlab.com/gitlab-org/gitlab-build-images:golangci-lint-alpine
  stage: lint
  script:
    - golangci-lint run --out-format code-climate | tee gl-code-quality-report.json | jq -r '.[] | "\(.location.path):\(.location.lines.begin) \(.description)"'
  artifacts:
    reports:
      codequality: gl-code-quality-report.json
    paths:
      - gl-code-quality-report.json
  extends: .cache
  allow_failure: true

pull_charts:
  stage: prepare
  script:
    - scripts/retrieve_gitlab_charts.sh
  extends: .cache

unit_tests:
  stage: test
  script:
    - export HELM_CHARTS="${CI_PROJECT_DIR}/charts"
    - export GITLAB_OPERATOR_ASSETS="${CI_PROJECT_DIR}/hack/assets"
    - mkdir coverage
    - /go/bin/ginkgo -skip 'replacement|controller' -cover -outputdir=coverage ./...
  extends: .cache

slow_unit_tests:
  stage: test
  script:
    - export HELM_CHARTS="${CI_PROJECT_DIR}/charts"
    - export GITLAB_OPERATOR_ASSETS="${CI_PROJECT_DIR}/hack/assets"
    - mkdir coverage
    - /go/bin/ginkgo -focus 'controller' -cover -outputdir=coverage ./...
  extends: .cache

replacement_tests:
  stage: test
  script:
    - export HELM_CHARTS="${CI_PROJECT_DIR}/charts"
    - export GITLAB_OPERATOR_ASSETS="${CI_PROJECT_DIR}/hack/assets"
    - mkdir coverage
    - /go/bin/ginkgo -focus 'replacement' -cover -outputdir=coverage ./...
  allow_failure: true
  extends: .cache

build_all:
  stage: build
  script:
    - CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -a -installsuffix cgo ./...
  extends: .cache

build_latest_image:
  <<: *docker_build_job
  stage: release
  variables:
    DOCKER_IMAGE: "${CI_REGISTRY_IMAGE}:latest"
  only:
    - master

build_branch_image:
  <<: *docker_build_job
  stage: release
  variables:
    DOCKER_IMAGE: "${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_SLUG}"
  except:
    - master

build_bundle_image:
  <<: *docker_build_job
  stage: release
  variables:
    DOCKER_IMAGE: "${CI_REGISTRY_IMAGE}/bundle"
    DOCKER_FILE: Dockerfile.bundle
  only:
    - master

build_sha_image:
  <<: *docker_build_job
  stage: release
  variables:
    DOCKER_IMAGE: "${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}"

functional_tests:
  stage: functional_test
  variables:
    NAMESPACE: "${CI_COMMIT_REF_SLUG}"
    TAG: "${CI_COMMIT_SHORT_SHA}"
    CHART_VERSION: '4.9.1'
  script:
    - ./scripts/test.sh
  extends: .cache
