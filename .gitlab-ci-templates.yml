.if_on_dev: &if_on_dev
  if: '$CI_SERVER_HOST == "dev.gitlab.org" && $CI_PROJECT_PATH == "gitlab/cloud-native/gitlab-operator"'

.if_release_tag: &if_release_tag
  if: '$CI_COMMIT_TAG =~ /^[0-9]+\.[0-9]+\.[0-9]+(-(rc|RC|beta)\d*)?$/'

.if_release_tag_on_dev: &if_release_tag_on_dev
  if: '$CI_SERVER_HOST == "dev.gitlab.org" && $CI_PROJECT_PATH == "gitlab/cloud-native/gitlab-operator" && $CI_COMMIT_TAG =~ /^[0-9]+\.[0-9]+\.[0-9]+(-(rc|RC|beta)\d*)?$/'

.skip_if_release_tag: &skip_if_release_tag
  <<: *if_release_tag
  when: never

.on_failure_if_release_tag: &on_failure_if_release_tag
  <<: *if_release_tag
  when: on_failure

.if_default_branch: &if_default_branch
  if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH

.skip_if_default_branch: &skip_if_default_branch
  <<: *if_default_branch
  when: never

.on_failure_if_default_branch: &on_failure_if_default_branch
  <<: *if_default_branch
  when: on_failure

.if_default_branch_with_bundle_changes: &if_default_branch_with_bundle_changes
  <<: *if_default_branch
  changes:
  - bundle/**/*

.if_stable_branch: &if_stable_branch
  if: '$CI_COMMIT_REF_NAME =~ /^[0-9]+-[0-9]+-stable$/'

.skip_if_stable_branch: &skip_if_stable_branch
  <<: *if_stable_branch
  when: never

.on_failure_if_stable_branch: &on_failure_if_stable_branch
  <<: *if_stable_branch
  when: on_failure

.if_dev_mirror: &if_dev_mirror
  if: '$CI_PROJECT_PATH == "gitlab/cloud-native/gitlab-operator"'

.skip_if_dev_mirror: &skip_if_dev_mirror
  <<: *if_dev_mirror
  when: never

.if_docs_branch: &if_docs_branch
  if: '$CI_COMMIT_REF_NAME =~ /(^docs[\/-].+|.+-docs$)/'

.skip_if_docs_branch: &skip_if_docs_branch
  <<: *if_docs_branch
  when: never

.manual_if_release_tag: &manual_if_release_tag
  <<: *if_release_tag
  when: manual

.manual_if_release_tag_on_dev: &manual_if_release_tag_on_dev
  <<: *if_release_tag_on_dev
  when: manual

.if_redhat_certification: &if_redhat_certification
  if: '$REDHAT_CERTIFICATION == "true"'
  #TODO at the moment publishing is broken due to changes in RH API
  # so we'll let things fail until it is fixed
  allow_failure: true

variables:
  REDHAT_PROJECT_JSON: '{"gitlab-operator":{"ospid":"ospid-a369d742-5890-45e9-a303-6926cbe8e171","pid":"5e96152f4b2cf9c97fb2cc26"}}'

.cache:
  variables:
    GOPATH: "${CI_PROJECT_DIR}/.go"
  cache:
    key: ${CI_JOB_NAME}
    paths:
      - .go/pkg/mod/
    when: 'always'

.build_review_template:
  # Build all required pre-requisites for deployment:
  #  * populate secret references
  #  * trim HOSTSSUFFIX and TEST_NAMESPACE
  #  * build manifests
  extends: .cache
  stage: review
  variables:
    CLEANUP: "no"
  script:
  - ls -l ${BUILD_DIR} || true
  # Trim HOSTSUFFIX and TESTS_NAMESPACE to acceptable length (63 char)
  # as per kubernetes/DNS specs
  - source ci/scripts/trim_env.sh
  - ci/scripts/create_trimmed_env_file.sh deploy_namespace.env
  ## -- End of trimming
  - &vars_on_dev_gitlab_org |
      if [ "$CI_SERVER_HOST" = "dev.gitlab.org" ] && [ "$CI_PROJECT_PATH" = "gitlab/cloud-native/gitlab-operator" ]
      then
        export REGISTRY_AUTH_SECRET="dev-registry-pull-secret"
        export REGISTRY_AUTH_SECRET_NS="default"
      fi
  # Build manifests
  - ./scripts/test.sh build_kustomized
  # Since Artifact paths don't seem to accept dynamic variables we'll have to manually 
  # drop proper files in place:
  - |
    if [ "${OLD_HOSTSUFFIX}" != "${HOSTSUFFIX}" ]
    then
      cp .build/glop-${HOSTSUFFIX}.${DOMAIN}.yaml  .build/glop-${OLD_HOSTSUFFIX}.${DOMAIN}.yaml
      cp .build/gitlab-${HOSTSUFFIX}.${DOMAIN}.yaml  .build/gitlab-${OLD_HOSTSUFFIX}.${DOMAIN}.yaml
    fi
  artifacts:
    paths:
      #NOTE: this will affect following Jobs providing manifest crafted to be deployed into tests.
      #      where this may backfire is if we push "publish" to happen *after* tests.
      #NOTE2: we need both .build and .install artifacts for later tear-down jobs as well as troubleshooting
      - ${BUILD_DIR}/operator.yaml
      - ${BUILD_DIR}/openshift_resources.yaml
      # In fact here we're getting OLD_HOSTSUFFIX and not the trimmed one:
      - ${BUILD_DIR}/glop-${HOSTSUFFIX}.${DOMAIN}.yaml
      - ${BUILD_DIR}/gitlab-${HOSTSUFFIX}.${DOMAIN}.yaml
      # Exporting this to simplify further re-export from subsequent jobs
      - deploy_namespace.env
    reports:
      dotenv: deploy_namespace.env

  rules:
    - !reference [.skip_if_release_tag]
    - !reference [.skip_if_docs_branch]
    - if: '$CI_COMMIT_BRANCH'

.create_review_template:
  # We `need:` "build" to inherit `artifacts.reports.dotenv`
  # properly. Has to be done individually for each job extending .create_review_template
  extends: .cache
  stage: review
  script: 
    - echo "Creating deployment environment"
  artifacts:
    reports:
      # we should've received file from "build" so we're going to recycle it
      dotenv: 
      - deploy_namespace.env
  rules:
    - !reference [.skip_if_release_tag]
    - !reference [.skip_if_docs_branch]
    - if: '$CI_COMMIT_BRANCH'

.review_template:
  # We `need:` "build" and "create" to inherit `artifacts.reports.dotenv`
  # properly. Has to be done individually for each job extending .review_template
  extends: .cache
  stage: review
  variables:
    CLEANUP: "no"
  script:
  # Debug info:
  - ls -l ${BUILD_DIR} || true
  - ls -l ${INSTALL_DIR} || true
  - ci/scripts/debug_trimmed_env.sh
  # -- End of Debug
  - *vars_on_dev_gitlab_org
  # Restore short-named deployment files first (becuse artifact paths won't accept dynamic vars)
  - |
    if [ "${OLD_HOSTSUFFIX}" != "${HOSTSUFFIX}" ]
    then
      cp ${BUILD_DIR}/glop-${OLD_HOSTSUFFIX}.${DOMAIN}.yaml  ${BUILD_DIR}/glop-${HOSTSUFFIX}.${DOMAIN}.yaml
      cp ${BUILD_DIR}/gitlab-${OLD_HOSTSUFFIX}.${DOMAIN}.yaml  ${BUILD_DIR}/gitlab-${HOSTSUFFIX}.${DOMAIN}.yaml
    fi
  # Run deployment
  - ./scripts/test.sh deploy_kustomized
  # And we need to copy things around, again
  - |
    if [ "${OLD_HOSTSUFFIX}" != "${HOSTSUFFIX}" ]
    then
      cp ${INSTALL_DIR}/glop-${HOSTSUFFIX}.${DOMAIN}.yaml  ${INSTALL_DIR}/glop-${OLD_HOSTSUFFIX}.${DOMAIN}.yaml
      cp ${INSTALL_DIR}/gitlab-${HOSTSUFFIX}.${DOMAIN}.yaml  ${INSTALL_DIR}/gitlab-${OLD_HOSTSUFFIX}.${DOMAIN}.yaml
    fi
  # Export secret values for further consumption in subsequent jobs
  - echo "ROOT_PASSWORD=$(kubectl -n $TESTS_NAMESPACE get secret gitlab-gitlab-initial-root-password -ojsonpath='{.data.password}' | base64 --decode ; echo)" >> deploy_namespace.env
  - echo "GITLAB_VERSION=$(kubectl -n $TESTS_NAMESPACE exec -i $(kubectl -n $TESTS_NAMESPACE get pods | grep sidekiq | awk '{print $1}') -c sidekiq -- cat /srv/gitlab/VERSION)" >> deploy_namespace.env
  artifacts:
    paths:
      #NOTE: this will affect following Jobs providing manifest crafted to be deployed into tests.
      #      where this may backfire is if we push "publish" to happen *after* tests.
      #NOTE2: we need both .build and .install artifacts for later tear-down jobs as well as troubleshooting
      - ${INSTALL_DIR}/glop-${HOSTSUFFIX}.${DOMAIN}.yaml
      - ${INSTALL_DIR}/gitlab-${HOSTSUFFIX}.${DOMAIN}.yaml
    reports:
      dotenv: deploy_namespace.env
  retry: 1
  rules:
    - !reference [.skip_if_release_tag]
    - !reference [.skip_if_docs_branch]
    - if: '$CI_COMMIT_BRANCH'

.qa:
  # We `need:` "review" to inherit `artifacts.paths.reports.dotenv`
  # properly. Has to be done individually for each job that extends .qa
  image: registry.gitlab.com/gitlab-org/gitlab-omnibus-builder/ruby_docker
  stage: qa
  services:
  - docker:dind
  variables:
    QA_ARTIFACTS_DIR: $CI_PROJECT_DIR
    EE_LICENSE: $GITLAB_QA_EE_LICENSE
    QA_OPTIONS: "--tag smoke"
    KNAPSACK_REPORT_PATH: "knapsack/master_report.json"
    KNAPSACK_TEST_FILE_PATTERN: "qa/specs/features/**/*_spec.rb"
    KNAPSACK_GENERATE_REPORT: "true"
  script:
    - export QA_ENVIRONMENT_URL="https://gitlab-${HOSTSUFFIX}.${DOMAIN}"
    - echo $QA_ENVIRONMENT_URL $GITLAB_VERSION
    - gem install gitlab-qa
    - SIGNUP_DISABLED=true QA_DEBUG=true GITLAB_USERNAME=root GITLAB_PASSWORD=$ROOT_PASSWORD GITLAB_ADMIN_USERNAME=root GITLAB_ADMIN_PASSWORD=$ROOT_PASSWORD gitlab-qa Test::Instance::Any EE:$GITLAB_VERSION $QA_ENVIRONMENT_URL -- $QA_OPTIONS
  artifacts:
    when: on_failure
    expire_in: 7d
    paths:
    - ./gitlab-qa-run-*
  allow_failure: true
  parallel: 2
  rules:
    - !reference [.skip_if_docs_branch]
    - !reference [.skip_if_release_tag]
    - if: '$CI_COMMIT_BRANCH'

.stop_review_template:
  stage: cleanup
  needs: [] # if `review` stage fails, still allow this job to be triggered
  variables:
    DEBUG_CLEANUP: "yes"
    CLEANUP: "only"
  script:
    - ls -l ${BUILD_DIR} || true
    - ls -l ${INSTALL_DIR} || true
    # Restore short-named deployment files first (becuse artifact paths won't accept dynamic vars)
    - |
      if [ "${OLD_HOSTSUFFIX}" != "${HOSTSUFFIX}" ]
      then
        cp ${BUILD_DIR}/gitlab-${OLD_HOSTSUFFIX}.${DOMAIN}.yaml ${BUILD_DIR}/gitlab-${HOSTSUFFIX}.${DOMAIN}.yaml
        cp ${BUILD_DIR}/glop-${OLD_HOSTSUFFIX}.${DOMAIN}.yaml ${BUILD_DIR}/glop-${HOSTSUFFIX}.${DOMAIN}.yaml
      fi
    # Run environment cleanup
    - ./scripts/test.sh cleanup
  allow_failure: true
  artifacts:
    when: always
    expire_in: 7d
    paths:
      # Persist the manifests for debugging purposes.
      - ${BUILD_DIR}/gitlab-${HOSTSUFFIX}.${DOMAIN}.yaml
      - ${BUILD_DIR}/glop-${HOSTSUFFIX}.${DOMAIN}.yaml
      - ${BUILD_DIR}/glop-${HOSTSUFFIX}.${DOMAIN}.no-crd.yaml
  rules:
    - !reference [.skip_if_docs_branch]
    - !reference [.skip_if_release_tag]
    - if: '$CI_COMMIT_BRANCH'
      when: manual
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
      when: manual
    - <<: *if_stable_branch
      when: manual
