package gitlab

import (
	"fmt"

	. "github.com/onsi/ginkgo"
	. "github.com/onsi/gomega"

	"gitlab.com/gitlab-org/cloud-native/gitlab-operator/pkg/resource"
)

var _ = Describe("Including or excluding the self-signed certificates Job", func() {
	chartValuesDefault := resource.Values{}

	chartValuesDisabled := resource.Values{}
	_ = chartValuesDisabled.SetValue(sharedSecretsEnabled, false)

	// External CertManager, internal issuer
	// https://docs.gitlab.com/charts/installation/tls.html#external-cert-manager-and-internal-issuer
	valuesExternalCertManagerInternalIssuer := `
certmanager:
  install: false
certmanager-issuer:
  email: you@example.com
global:
  ingress:
    annotations:
      kubernetes.io/tls-acme: true
`

	chartValuesExternalCertManagerInternalIssuer := resource.Values{}
	_ = chartValuesExternalCertManagerInternalIssuer.AddFromYAML(valuesExternalCertManagerInternalIssuer)

	// External CertManager, external issuer
	// https://docs.gitlab.com/charts/installation/tls.html#external-cert-manager-and-issuer-external
	valuesExternalCertManagerExternalIssuer := `
certmanager:
  install: false
global:
  ingress:
    configureCertmanager: false
global:
  ingress:
    annotations:
      kubernetes.io/tls-acme: true
gitlab:
  webservice:
    ingress:
      tls:
        secretName: test-gitlab-tls
registry:
  ingress:
    tls:
      secretName: test-registry-tls
minio:
  ingress:
    tls:
      secretName: test-minio-tls
`

	chartValuesExternalCertManagerExternalIssuer := resource.Values{}
	_ = chartValuesExternalCertManagerInternalIssuer.AddFromYAML(valuesExternalCertManagerExternalIssuer)

	// Use your own wildcard certificate
	// https://docs.gitlab.com/charts/installation/tls.html#option-2-use-your-own-wildcard-certificate
	valuesProvidedWildcardCertificate := `
certmanager:
  install: false
global:
  ingress:
    configureCertmanager: false
global:
  ingress:
    tls:
      secretName: my-wildcard-cert-secret
`

	chartValuesProvidedWildcardCertificate := resource.Values{}
	_ = chartValuesProvidedWildcardCertificate.AddFromYAML(valuesProvidedWildcardCertificate)

	// Use individual certificate per service
	// https://docs.gitlab.com/charts/installation/tls.html#option-2-use-your-own-wildcard-certificate
	valuesIndividualCertificates := `
certmanager:
  install: false
global:
  ingress:
    configureCertmanager: false
global:
  ingress:
    tls:
      enabled: true
gitlab:
  webservice:
    ingress:
      tls:
        secretName: RELEASE-gitlab-tls
registry:
  ingress:
    tls:
      secretName: RELEASE-registry-tls
minio:
  ingress:
    tls:
      secretName: RELEASE-minio-tls
`

	chartValuesIndividualCertificates := resource.Values{}
	_ = chartValuesIndividualCertificates.AddFromYAML(valuesIndividualCertificates)

	// Use auto-generated self-signed wildcard certificate
	// https://docs.gitlab.com/charts/installation/tls.html#option-4-use-auto-generated-self-signed-wildcard-certificate
	valuesAutoGeneratedSelfSignedWildcardCertificate := `
certmanager:
  install: false
global:
  ingress:
    configureCertmanager: false
`

	chartValuesAutoGeneratedSelfSignedWildcardCertificate := resource.Values{}
	_ = chartValuesAutoGeneratedSelfSignedWildcardCertificate.AddFromYAML(valuesAutoGeneratedSelfSignedWildcardCertificate)

	tests := map[string]struct {
		chartValues resource.Values
		expected    bool
	}{
		"disabled (default)": {chartValues: chartValuesDefault, expected: false},
		"disabled":           {chartValues: chartValuesDisabled, expected: false},
		"using external CertManager, internal Issuer":           {chartValues: chartValuesExternalCertManagerInternalIssuer, expected: false},
		"using external CertManager, external Issuer":           {chartValues: chartValuesExternalCertManagerExternalIssuer, expected: false},
		"using provided wildcard certificate":                   {chartValues: chartValuesProvidedWildcardCertificate, expected: false},
		"using individual certificate per service":              {chartValues: chartValuesIndividualCertificates, expected: false},
		"using auto-generated self-signed wildcard certificate": {chartValues: chartValuesAutoGeneratedSelfSignedWildcardCertificate, expected: true},
	}

	for name, test := range tests {
		// Must assign a copy of the loop variable to a local variable:
		// https://onsi.github.io/ginkgo/#dynamically-generating-specs
		name := name
		test := test

		When(name, func() {
			mockGitLab := CreateMockGitLab(releaseName, namespace, test.chartValues)
			adapter := CreateMockAdapter(mockGitLab)
			template, err := GetTemplate(adapter)
			enabled := SelfSignedCertsEnabled(adapter)

			It("Should render the template", func() {
				Expect(err).To(BeNil())
				Expect(template).NotTo(BeNil())
			})

			It(fmt.Sprintf("Should set SelfSignedCertsEnabled=%t", test.expected), func() {
				Expect(enabled).To(Equal(test.expected))
			})
		})
	}
})
